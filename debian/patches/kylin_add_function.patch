Description: <short summary of the patch>
 TODO: Fixed an issue where the mute shortcut key would mute the system and open the control panel to display an error in the mute state.Realize the function of real-time monitoring changes of transparency of windows and menus.Added 4k screen enlargement setting to fix the problem of no icon and black icon
 .
 ukui-media (2.0.3-1kylin3k1) v101; urgency=medium
 .
   * Add the following functions
     - Add headphone and speaker osd tip
     - Fixed an issue where the mute shortcut key would mute the system and open the control panel to display an error in the mute state
     - Realize the function of real-time monitoring changes of transparency of windows and menus
     - Added 4k screen enlargement setting to fix the problem of no icon and black icon
Author: fengzhaoxiang <fengzhaoxiang@kylinos.cn>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2020-07-03

--- ukui-media-2.0.3.orig/data/ukui-volume-control.desktop.in.in
+++ ukui-media-2.0.3/data/ukui-volume-control.desktop.in.in
@@ -13,3 +13,4 @@ X-UKUI-Bugzilla-Bugzilla=UKUI
 X-UKUI-Bugzilla-Product=ukui-media
 X-UKUI-Bugzilla-Component=ukui-volume-control
 X-UKUI-Bugzilla-Version=@VERSION@
+NoDisplay=true
--- ukui-media-2.0.3.orig/ukui-volume-control-applet-qt/main.cpp
+++ ukui-media-2.0.3/ukui-volume-control-applet-qt/main.cpp
@@ -81,7 +81,7 @@ int main(int argc, char *argv[])
     QTranslator translator;
 
     if (locale == "zh_CN") {
-        if (translator.load("/usr/share/ukui-media/translations/*.qm")) {
+        if (translator.load("/usr/share/ukui-media/translations/ukui-volume-control-applet-qt-zh_CN.qm")) {
             app.installTranslator(&translator);
         }
         else {
--- ukui-media-2.0.3.orig/ukui-volume-control-applet-qt/ukmedia_application_volume_widget.cpp
+++ ukui-media-2.0.3/ukui-volume-control-applet-qt/ukmedia_application_volume_widget.cpp
@@ -27,7 +27,7 @@ ApplicationVolumeWidget::ApplicationVolu
     applicationLabel = new QLabel(tr("Application Volume"),this);
     app_volume_list = new QStringList;
     systemVolumeLabel = new QLabel(tr("System Volume"),this);
-    systemVolumeBtn = new QPushButton(this);
+    systemVolumeBtn = new UkuiButtonDrawSvg(this);
     systemVolumeSlider = new UkmediaVolumeSlider(this);
     systemVolumeDisplayLabel = new QLabel(this);
     systemVolumeWidget = new QWidget(this);
--- ukui-media-2.0.3.orig/ukui-volume-control-applet-qt/ukmedia_application_volume_widget.h
+++ ukui-media-2.0.3/ukui-volume-control-applet-qt/ukmedia_application_volume_widget.h
@@ -35,7 +35,7 @@ public:
 private:
     QLabel *applicationLabel;
     QLabel *systemVolumeLabel;
-    QPushButton *systemVolumeBtn;
+    UkuiButtonDrawSvg *systemVolumeBtn;
     UkmediaVolumeSlider *systemVolumeSlider;
     QLabel *systemVolumeDisplayLabel;
 
--- ukui-media-2.0.3.orig/ukui-volume-control-applet-qt/ukmedia_device_switch_widget.cpp
+++ ukui-media-2.0.3/ukui-volume-control-applet-qt/ukmedia_device_switch_widget.cpp
@@ -200,9 +200,10 @@ void DeviceSwitchWidget::showMenu()
 
 DeviceSwitchWidget::DeviceSwitchWidget(QWidget *parent) : QWidget (parent)
 {
-    setWindowFlags(Qt::WindowStaysOnTopHint|Qt::Popup);
-    setAttribute(Qt::WA_TranslucentBackground);
     setAttribute(Qt::WA_TranslucentBackground);
+    setWindowFlags(Qt::WindowStaysOnTopHint|Qt::Popup);
+
+    mThemeName = UKUI_THEME_WHITE;
     devWidget = new UkmediaDeviceWidget(this);
     appWidget = new ApplicationVolumeWidget(this);//appScrollWidget->area);
     miniWidget = new UkmediaMiniMasterVolumeWidget();
@@ -295,6 +296,15 @@ DeviceSwitchWidget::DeviceSwitchWidget(Q
                      G_CALLBACK (on_context_state_notify),
                      this);
 
+    //检测系统主题
+    if (QGSettings::isSchemaInstalled(UKUI_THEME_SETTING)){
+        m_pThemeSetting = new QGSettings(UKUI_THEME_SETTING);
+        if (m_pThemeSetting->keys().contains("styleName")) {
+            mThemeName = m_pThemeSetting->get(UKUI_THEME_NAME).toString();
+        }
+        connect(m_pThemeSetting, SIGNAL(changed(const QString &)),this,SLOT(ukuiThemeChangedSlot(const QString &)));
+    }
+
     /*!
      * \brief
      * \details
@@ -415,13 +425,21 @@ DeviceSwitchWidget::DeviceSwitchWidget(Q
  */
 void DeviceSwitchWidget::systemTrayMenuInit()
 {
-    menu = new QMenu(this);
+    menu = new QMenu();
     soundSystemTrayIcon = new UkmediaTrayIcon(this);
 
     //为系统托盘图标添加菜单静音和声音首选项
     soundSystemTrayIcon->setToolTip(tr("Output volume control"));
+#if (QT_VERSION <= QT_VERSION_CHECK(5,6,1))
+    m_pMuteAction = new QAction(QIcon(""),tr("Mute"),this);
+    m_pSoundPreferenceAction = new QAction(tr("Sound preference(S)"),this);
+#elif (QT_VERSION > QT_VERSION_CHECK(5,6,1))
     m_pMuteAction = new QAction(QIcon(""),tr("Mute"));
-    m_pSoundPreferenceAction = new QAction(QIcon("/usr/share/ukui-media/img/setting.svg"),tr("Sound preference(S)"));
+    m_pSoundPreferenceAction = new QAction(tr("Sound preference(S)"));
+#endif
+    QString settingsIconStr = "document-page-setup";
+    QIcon settingsIcon = QIcon::fromTheme(settingsIconStr);
+    m_pSoundPreferenceAction->setIcon(settingsIcon);
 
     //设置右键菜单
     menu->addAction(m_pMuteAction);
@@ -436,7 +454,7 @@ void DeviceSwitchWidget::systemTrayMenuI
             this,SLOT(activatedSystemTrayIconSlot(QSystemTrayIcon::ActivationReason)));
     connect(m_pSoundPreferenceAction,SIGNAL(triggered()),this,SLOT(jumpControlPanelSlot()));
 
-    menu->setWindowFlag(Qt::FramelessWindowHint);        //重要
+    menu->setWindowFlags(Qt::WindowStaysOnTopHint|Qt::Popup);       //重要
     menu->setAttribute(Qt::WA_TranslucentBackground);    //重要
 }
 
@@ -456,7 +474,7 @@ void DeviceSwitchWidget::miniMastrerSlid
     int volume = value*65536/100;
     mate_mixer_stream_control_set_volume(control,guint(volume));
     miniWidget->displayVolumeLabel->setText(percent);
-
+    themeChangeIcons();
     //音量值改变时添加提示音
     QMediaPlayer *player = new QMediaPlayer;
     player->setMedia(QUrl::fromLocalFile("/usr/share/sounds/ukui/default/alerts/drip.ogg"));
@@ -519,14 +537,17 @@ void DeviceSwitchWidget::devWidgetMuteBu
         status = false;
         m_pMuteAction->setIcon(QIcon(""));
         mate_mixer_stream_control_set_mute(control,status);
-        updateSystemTrayIcon(volume,status);
+//        updateSystemTrayIcon(volume,status);
     }
     else {
         status =true;
-        m_pMuteAction->setIcon(QIcon("/usr/share/ukui-media/img/tick.svg"));
+        QString muteActionIconStr = "object-select-symbolic";
+        QIcon muteActionIcon = QIcon::fromTheme(muteActionIconStr);
+        m_pMuteAction->setIcon(muteActionIcon);
         mate_mixer_stream_control_set_mute(control,status);
-        updateSystemTrayIcon(volume,status);
+//        updateSystemTrayIcon(volume,status);
     }
+    themeChangeIcons();
     Q_EMIT system_muted_signal(status);
     menu->hide();
 }
@@ -548,15 +569,18 @@ void DeviceSwitchWidget::miniWidgetMuteB
         status = false;
         m_pMuteAction->setIcon(QIcon(""));
         mate_mixer_stream_control_set_mute(control,status);
-        updateSystemTrayIcon(volume,status);
+//        updateSystemTrayIcon(volume,status);
     }
     else {
         status =true;
-        m_pMuteAction->setIcon(QIcon("/usr/share/ukui-media/img/tick.svg"));
+        QString muteActionIconStr = "object-select-symbolic";
+        QIcon muteActionIcon = QIcon::fromTheme(muteActionIconStr);
+        m_pMuteAction->setIcon(muteActionIcon);
         mate_mixer_stream_control_set_mute(control,status);
-        updateSystemTrayIcon(volume,status);
+//        updateSystemTrayIcon(volume,status);
     }
     Q_EMIT system_muted_signal(status);
+    themeChangeIcons();
     menu->hide();
 }
 
@@ -577,14 +601,17 @@ void DeviceSwitchWidget::appWidgetMuteBu
         status = false;
         m_pMuteAction->setIcon(QIcon(""));
         mate_mixer_stream_control_set_mute(control,status);
-        updateSystemTrayIcon(volume,status);
+//        updateSystemTrayIcon(volume,status);
     }
     else {
         status =true;
-        m_pMuteAction->setIcon(QIcon("/usr/share/ukui-media/img/tick.svg"));
+        QString muteActionIconStr = "object-select-symbolic";
+        QIcon muteActionIcon = QIcon::fromTheme(muteActionIconStr);
+        m_pMuteAction->setIcon(muteActionIcon);
         mate_mixer_stream_control_set_mute(control,status);
-        updateSystemTrayIcon(volume,status);
+//        updateSystemTrayIcon(volume,status);
     }
+    themeChangeIcons();
     Q_EMIT system_muted_signal(status);
     menu->hide();
 }
@@ -610,7 +637,9 @@ void DeviceSwitchWidget::muteCheckBoxRel
     }
     else {
         status =true;
-        m_pMuteAction->setIcon(QIcon("/usr/share/ukui-media/img/tick.svg"));
+        QString muteActionIconStr = "object-select-symbolic";
+        QIcon muteActionIcon = QIcon::fromTheme(muteActionIconStr);
+        m_pMuteAction->setIcon(muteActionIcon);
         mate_mixer_stream_control_set_mute(control,status);
         updateSystemTrayIcon(volume,status);
     }
@@ -627,8 +656,9 @@ void DeviceSwitchWidget::actionMuteTrigg
 {
     bool isMute = false;
     stream = mate_mixer_context_get_default_output_stream(context);
-    if (stream != nullptr)
+    if (stream != nullptr) {
         control = mate_mixer_stream_get_default_control(stream);
+    }
     isMute = mate_mixer_stream_control_get_mute(control);
     int opVolume = int(mate_mixer_stream_control_get_volume(control));
     opVolume = int(opVolume*100/65536.0 + 0.5);
@@ -637,7 +667,9 @@ void DeviceSwitchWidget::actionMuteTrigg
         mate_mixer_stream_control_set_mute(control,FALSE);
     }
     else {
-        m_pMuteAction->setIcon(QIcon("/usr/share/ukui-media/img/tick.svg"));
+        QString muteActionIconStr = "object-select-symbolic";
+        QIcon muteActionIcon = QIcon::fromTheme(muteActionIconStr);
+        m_pMuteAction->setIcon(muteActionIcon);
         mate_mixer_stream_control_set_mute(control,TRUE);
     }
     isMute = mate_mixer_stream_control_get_mute(control);
@@ -810,6 +842,203 @@ void DeviceSwitchWidget::deviceComboxInd
     }
 }
 
+void DeviceSwitchWidget::drawImagColorFromTheme(UkuiButtonDrawSvg *button, QString iconStr)
+{
+    button->themeIcon.image = QIcon::fromTheme(iconStr).pixmap(24,24).toImage();
+    button->themeIcon.color = QColor(0,0,0,216);
+    if (mThemeName == UKUI_THEME_WHITE) {
+//        button->themeIcon.color = QColor(0,0,0,216);
+        button->themeIcon.color = QColor(255,255,255,216);
+    }
+    else if (mThemeName == UKUI_THEME_BLACK) {
+        button->themeIcon.color = QColor(255,255,255,216);
+    }
+}
+
+/*
+    深色主题时输出音量图标
+*/
+void DeviceSwitchWidget::outputVolumeDarkThemeImage(int value,bool status)
+{
+    QString iconStr;
+    if (status) {
+        iconStr = "audio-volume-muted-symbolic";
+    }
+    else if (value <= 0) {
+        iconStr = "audio-volume-muted-symbolic";
+    }
+    else if (value > 0 && value <= 33) {
+        iconStr = "audio-volume-low-symbolic";
+    }
+    else if (value >33 && value <= 66) {
+        iconStr = "audio-volume-medium-symbolic";
+    }
+    else {
+        iconStr = "audio-volume-high-symbolic";
+    }
+    if (mThemeName == UKUI_THEME_WHITE) {
+//        miniWidget->muteBtn->themeIcon.image = QIcon::fromTheme(iconStr).pixmap(24,24).toImage();
+//        devWidget->outputMuteBtn->themeIcon.image = QIcon::fromTheme(iconStr).pixmap(24,24).toImage();
+//        appWidget->systemVolumeBtn->themeIcon.image = QIcon::fromTheme(iconStr).pixmap(32,32).toImage();
+//        miniWidget->muteBtn->setIcon(QIcon::fromTheme(iconStr));
+//        devWidget->outputMuteBtn->setIcon(QIcon::fromTheme(iconStr));
+//        appWidget->systemVolumeBtn->setIcon(QIcon::fromTheme(iconStr));
+        miniWidget->muteBtn->themeIcon.color = QColor(255,255,255,216);
+        devWidget->outputMuteBtn->themeIcon.color = QColor(255,255,255,216);
+        appWidget->systemVolumeBtn->themeIcon.color = QColor(255,255,255,216);
+
+        miniWidget->muteBtn->themeIcon.image = QIcon::fromTheme(iconStr).pixmap(24,24).toImage();
+        devWidget->outputMuteBtn->themeIcon.image = QIcon::fromTheme(iconStr).pixmap(24,24).toImage();
+        appWidget->systemVolumeBtn->themeIcon.image = QIcon::fromTheme(iconStr).pixmap(32,32).toImage();
+
+    }
+    else if (mThemeName == UKUI_THEME_BLACK) {
+        miniWidget->muteBtn->themeIcon.color = QColor(255,255,255,216);
+        devWidget->outputMuteBtn->themeIcon.color = QColor(255,255,255,216);
+        appWidget->systemVolumeBtn->themeIcon.color = QColor(255,255,255,216);
+
+        miniWidget->muteBtn->themeIcon.image = QIcon::fromTheme(iconStr).pixmap(24,24).toImage();
+        devWidget->outputMuteBtn->themeIcon.image = QIcon::fromTheme(iconStr).pixmap(24,24).toImage();
+        appWidget->systemVolumeBtn->themeIcon.image = QIcon::fromTheme(iconStr).pixmap(32,32).toImage();
+    }
+}
+
+/*
+    输入音量图标
+*/
+void DeviceSwitchWidget::inputVolumeDarkThemeImage(int value,bool status)
+{
+    QString inputIconStr;
+    if (status) {
+        inputIconStr = "microphone-sensitivity-muted-symbolic";
+    }
+    else if (value <= 0) {
+        inputIconStr = "microphone-sensitivity-muted-symbolic";
+    }
+    else if (value > 0 && value <= 33) {
+        inputIconStr = "microphone-sensitivity-low-symbolic";
+    }
+    else if (value >33 && value <= 66) {
+        inputIconStr = "microphone-sensitivity-medium-symbolic";
+    }
+    else {
+        inputIconStr = "microphone-sensitivity-high-symbolic";
+    }
+    if (mThemeName == UKUI_THEME_WHITE) {
+//        qDebug() << "白色主题" ;
+        devWidget->inputMuteButton->themeIcon.color = QColor(255,255,255,190);
+        devWidget->inputMuteButton->themeIcon.image = QIcon::fromTheme(inputIconStr).pixmap(24,24).toImage();
+//        devWidget->inputMuteButton->setIcon(QIcon::fromTheme(inputIconStr));
+    }
+    else if (mThemeName == UKUI_THEME_BLACK) {
+        devWidget->inputMuteButton->themeIcon.color = QColor(255,255,255,190);
+        devWidget->inputMuteButton->themeIcon.image = QIcon::fromTheme(inputIconStr).pixmap(24,24).toImage();
+    }
+}
+
+/*
+    获取输入音量值
+*/
+int DeviceSwitchWidget::getInputVolume()
+{
+    return devWidget->inputDeviceSlider->value();
+}
+
+/*
+    获取输出音量值
+*/
+int DeviceSwitchWidget::getOutputVolume()
+{
+    return miniWidget->masterVolumeSlider->value();
+}
+
+/*
+   获取输入状态
+*/
+bool DeviceSwitchWidget::getInputMuteStatus()
+{
+    MateMixerStream *pStream = mate_mixer_context_get_default_input_stream(context);
+    MateMixerStreamControl *pControl = mate_mixer_stream_get_default_control(pStream);
+    return mate_mixer_stream_control_get_mute(pControl);
+}
+
+/*
+    获取输出状态
+*/
+bool DeviceSwitchWidget::getOutputMuteStatus()
+{
+    MateMixerStream *pStream = mate_mixer_context_get_default_output_stream(context);
+    MateMixerStreamControl *pControl = mate_mixer_stream_get_default_control(pStream);
+    return mate_mixer_stream_control_get_mute(pControl);
+}
+
+void DeviceSwitchWidget::themeChangeIcons()
+{
+    int nInputValue = getInputVolume();
+    int nOutputValue = getOutputVolume();
+    bool inputStatus = getInputMuteStatus();
+    bool outputStatus = getOutputMuteStatus();
+    
+    inputVolumeDarkThemeImage(nInputValue,inputStatus);
+    outputVolumeDarkThemeImage(nOutputValue,outputStatus);
+    qDebug() << "----" << nInputValue << nOutputValue << inputStatus << outputStatus;
+    miniWidget->muteBtn->repaint();
+    devWidget->inputMuteButton->repaint();
+//    appWidget->appMuteBtn->repaint();
+    appWidget->systemVolumeBtn->repaint();
+}
+
+/*!
+ * \brief
+ * \details
+ * 系统主题改变
+ */
+void DeviceSwitchWidget::ukuiThemeChangedSlot(const QString &themeStr)
+{
+    if (m_pThemeSetting->keys().contains("styleName")) {
+        mThemeName = m_pThemeSetting->get(UKUI_THEME_NAME).toString();
+    }
+//    QString themeOutputIconStr;
+//    QString themeInputIconStr;
+    themeChangeIcons();
+
+//    if (outputStatus) {
+//        themeOutputIconStr = "audio-volume-muted-symbolic";
+//    }
+//    else if (nOutputValue <= 0) {
+//        themeOutputIconStr = "audio-volume-muted-symbolic";
+//    }
+//    else if (nOutputValue > 0 && nOutputValue <= 33) {
+//        themeOutputIconStr = "audio-volume-low-symbolic";
+//    }
+//    else if (nOutputValue >33 && nOutputValue <= 66) {
+//        themeOutputIconStr = "audio-volume-medium-symbolic";
+//    }
+//    else {
+//        themeOutputIconStr = "audio-volume-high-symbolic";
+//    }
+
+//    if (inputStatus) {
+//        themeInputIconStr = "microphone-sensitivity-muted-symbolic";
+//    }
+//    else if (nInputValue <= 0) {
+//        themeInputIconStr = "microphone-sensitivity-muted-symbolic";
+//    }
+//    else if (nInputValue > 0 && nInputValue <= 33) {
+//        themeInputIconStr = "microphone-sensitivity-low-symbolic";
+//    }
+//    else if (nInputValue >33 && nInputValue <= 66) {
+//        themeInputIconStr = "microphone-sensitivity-medium-symbolic";
+//    }
+//    else {
+//        themeInputIconStr = "microphone-sensitivity-high-symbolic";
+//    }
+//    drawImagColorFromTheme(miniWidget->muteBtn,themeOutputIconStr);
+//    drawImagColorFromTheme(devWidget->inputMuteButton,themeInputIconStr);
+
+}
+
+
 /*!
  * \brief
  * \details
@@ -993,7 +1222,6 @@ void DeviceSwitchWidget::deviceSwitchWid
     deviceBtn->setToolTip(tr("Device Volume"));
     appVolumeBtn->setToolTip(tr("Application Volume"));
 
-    deviceBtn->toolTip().resize(98,38);
     switch(btnType) {
         case DEVICE_VOLUME_BUTTON:
         appVolumeBtn->setStyleSheet("QPushButton{background:transparent;border:0px;"
@@ -1258,6 +1486,15 @@ void DeviceSwitchWidget::add_application
 
     QString app_icon_name = mate_mixer_app_info_get_icon(info);
     app_name = mate_mixer_app_info_get_name (info);
+    if (app_name == nullptr) {
+        app_name = mate_mixer_stream_control_get_label(control);
+    }
+    if (app_name == nullptr) {
+        app_name = mate_mixer_stream_control_get_name(control);
+    }
+    if (app_name == nullptr) {
+        return;
+    }
     //添加应用添加到应用音量中
     add_app_to_appwidget(w,app_name,app_icon_name,control);
 
@@ -1385,6 +1622,51 @@ void DeviceSwitchWidget::remove_applicat
 /*!
  * \brief
  * \details
+ * 获取应用名称，从desktop全路径名下解析出应用名称
+ */
+QString DeviceSwitchWidget::getAppName(QString desktopfp)
+{
+    GError** error=nullptr;
+    GKeyFileFlags flags=G_KEY_FILE_NONE;
+    GKeyFile* keyfile=g_key_file_new ();
+
+    QByteArray fpbyte=desktopfp.toLocal8Bit();
+    char* filepath=fpbyte.data();
+    g_key_file_load_from_file(keyfile,filepath,flags,error);
+
+    char* name=g_key_file_get_locale_string(keyfile,"Desktop Entry","Name", nullptr, nullptr);
+    QString namestr=QString::fromLocal8Bit(name);
+
+    g_key_file_free(keyfile);
+    return namestr;
+}
+
+/*!
+ * \brief
+ * \details
+ * 获取应用图标，从desktop全路径名下解析出应用图标
+ */
+QString DeviceSwitchWidget::getAppIcon(QString desktopfp)
+{
+    GError** error=nullptr;
+    GKeyFileFlags flags=G_KEY_FILE_NONE;
+    GKeyFile* keyfile=g_key_file_new ();
+
+    QByteArray fpbyte=desktopfp.toLocal8Bit();
+    char* filepath=fpbyte.data();
+    g_key_file_load_from_file(keyfile,filepath,flags,error);
+
+    char* name=g_key_file_get_locale_string(keyfile,"Desktop Entry","Icon", nullptr, nullptr);
+    QString namestr=QString::fromLocal8Bit(name);
+
+    g_key_file_free(keyfile);
+    return namestr;
+}
+
+
+/*!
+ * \brief
+ * \details
  * 当有应用播放或录制音频时，将该应用添加到应用音量界面上
  */
 void DeviceSwitchWidget::add_app_to_appwidget(DeviceSwitchWidget *w,const gchar *app_name,QString app_icon_name,MateMixerStreamControl *control)
@@ -1398,18 +1680,45 @@ void DeviceSwitchWidget::add_app_to_appw
     volume = int(mate_mixer_stream_control_get_volume(control));
     normal = mate_mixer_stream_control_get_normal_volume(control);
     int display_volume = int(100 * volume / normal);
-    qDebug() << "app name" << app_name;
+    qDebug() << "app name" << app_name << "app icon name:" << app_icon_name;
     //设置应用的图标
     QString iconName = "/usr/share/applications/";
+
+    /*!
+     * \brief
+     * \details
+     * 由于获取到的麒麟影音软件获取的app icon不正确
+     * 可能是软件没有发出正确的信号告知正确的icon，
+     * 因此添加判断当匹配应用名为Kylinvideo时设置
+     * 正确的icon名来保证找到正确的desktop,从而设置
+     * 应用音量正确的应用名和图标
+     */
+    if (strcmp(app_name,"KylinVideo") == 0) {
+        app_icon_name = "kylin-video";
+    }
+
+    /*!
+     * \brief
+     * \details
+     * 由于腾讯视频是由谷歌浏览器网页版的腾讯视频封装的
+     * 因此获取的appName和appIconName均和chromium
+     * 相关，特定添加以下判断，来使得用户使用腾讯视频观看
+     * 视频的时候不会出现应用名和图标显示不正确的问题
+     */
+    if (strcmp(app_name,"Chromium") == 0 && strcmp(app_icon_name.toLatin1().data(),"chromium-browser") == 0) {
+        app_icon_name = "TencentVideo";
+    }
     iconName.append(app_icon_name);
     iconName.append(".desktop");
-    XdgDesktopFile xdg;
-    xdg.load(iconName);
-    QString title(xdg.localizedValue("Name").toString());
-    QString xdgicon(xdg.localizedValue("Icon").toString());
+    QString pAppName = w->getAppName(iconName);
+    QString pAppIcon = w->getAppIcon(iconName);
+//    XdgDesktopFile xdg;
+//    xdg.load(iconName);
+//    QString title(xdg.localizedValue("Name").toString());
+//    QString xdgicon(xdg.localizedValue("Icon").toString());
 
     w->appWidget->app_volume_list->append(app_icon_name);
-
+    qDebug() << "应用名为:" << pAppName << "desktop 名：" << iconName;
     //widget显示应用音量
     QWidget *app_widget = new QWidget(w->appWidget->displayAppVolumeWidget);
     app_widget->setFixedSize(306,60);
@@ -1453,7 +1762,7 @@ void DeviceSwitchWidget::add_app_to_appw
     w->appWidget->appIconBtn->setIconSize(icon_size);
 //    w->appWidget->appIconBtn->setStyleSheet("QPushButton{background:rgba(255,0,0,0.4);}");
     w->appWidget->appIconBtn->setStyleSheet("QPushButton{background:transparent;border:0px;padding-left:0px;}");
-    w->appWidget->appIconBtn->setIcon(QIcon::fromTheme(xdgicon));
+    w->appWidget->appIconBtn->setIcon(QIcon::fromTheme(pAppIcon));
     w->appWidget->appIconBtn->setFocusPolicy(Qt::NoFocus);
 
     w->appWidget->appSlider->setMaximum(100);
@@ -1485,27 +1794,36 @@ void DeviceSwitchWidget::add_app_to_appw
     if (btn == nullptr)
         return;
 
+    QString audioIconStr;
+    QIcon audioIcon;
     if (is_mute) {
+        audioIconStr = "audio-volume-muted";
         btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
     }
     else if (display_volume <= 0) {
+        audioIconStr = "audio-volume-muted";
         btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
     }
     else if (display_volume > 0 && display_volume <= 33) {
-       btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-low.svg"));
+        audioIconStr = "audio-volume-low";
+        btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-low.svg"));
     }
     else if(display_volume > 33 && display_volume <= 66) {
+        audioIconStr = "audio-volume-medium";
         btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-medium.svg"));
     }
     else if (display_volume > 66) {
+        audioIconStr = "audio-volume-high";
         btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-high.svg"));
     }
-
-    if (title == "") {
+//    w->drawImagColorFromTheme(btn,audioIconStr);
+    audioIcon = QIcon::fromTheme(audioIconStr);
+//    btn->setIcon(audioIcon);
+    if (pAppName == "") {
         w->appWidget->appLabel->setText(app_icon_name);
     }
     else {
-        w->appWidget->appLabel->setText(title);
+        w->appWidget->appLabel->setText(pAppName);
     }
 
     /*滑动条控制应用音量*/
@@ -1518,7 +1836,8 @@ void DeviceSwitchWidget::add_app_to_appw
         QPushButton *btn = w->findChild<QPushButton*>(appMuteBtnlStr);
         if (btn == nullptr)
             return;
-
+        QString audioIconStr;
+        QIcon audioIcon;
         bool status = mate_mixer_stream_control_get_mute(control);
         int v = int(value*65536/100 + 0.5);
         mate_mixer_stream_control_set_volume(control,guint(v));
@@ -1527,19 +1846,27 @@ void DeviceSwitchWidget::add_app_to_appw
         }
         if (status) {
             btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
+            audioIconStr = "audio-volume-muted";
         }
         else if (value <= 0) {
             btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
+            audioIconStr = "audio-volume-muted";
         }
         else if (value > 0 && value <= 33) {
             btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-low.svg"));
+            audioIconStr = "audio-volume-low";
         }
         else if(value > 33 && value <= 66) {
             btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-medium.svg"));
+            audioIconStr = "audio-volume-medium";
         }
         else if (value > 66) {
+            audioIconStr = "audio-volume-high";
             btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-high.svg"));
         }
+        audioIcon = QIcon::fromTheme(audioIconStr);
+//        btn->setIcon(audioIcon);
+//        w->drawImagColorFromTheme(btn,audioIconStr);
         Q_EMIT w->app_name_signal(appSliderStr);
     });
     /*应用音量同步*/
@@ -1562,28 +1889,39 @@ void DeviceSwitchWidget::add_app_to_appw
         QPushButton *btn = w->appWidget->findChild<QPushButton *>(appMuteBtnlStr);
         if (btn == nullptr)
             return;
+        QString muteButtonStr;
+        QIcon muteButtonIcon;
         isMute = mate_mixer_stream_control_get_mute(control);
         if (isMute) {
+            muteButtonStr = "audio-volume-muted";
             btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
         }
         else if (volume <= 0) {
+            muteButtonStr = "audio-volume-muted";
             btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
         }
         else if (volume > 0 && volume <= 33) {
+            muteButtonStr = "audio-volume-low";
             btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-low.svg"));
         }
         else if(volume > 33 && volume <= 66) {
             btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-medium.svg"));
+            muteButtonStr = "audio-volume-medium";
         }
         else if (volume > 66) {
+            muteButtonStr = "audio-volume-high";
             btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-high.svg"));
         }
+//        w->drawImagColorFromTheme(btn,audioIconStr);
+        muteButtonIcon = QIcon::fromTheme(muteButtonStr);
+//        btn->setIcon(muteButtonIcon);
     });
 
     connect(w,&DeviceSwitchWidget::app_volume_changed,[=](bool is_mute,int volume,QString app_name,QString appBtnName){
         Q_UNUSED(is_mute);
         QString slider_str = app_name;
-
+        QString sliderMuteButtonStr;
+        QIcon sliderMuteButtonIcon;
         QSlider *slider = w->findChild<QSlider*>(slider_str);
         if (slider == nullptr)
             return;
@@ -1593,44 +1931,61 @@ void DeviceSwitchWidget::add_app_to_appw
             return;
         if (is_mute) {
             btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
+            sliderMuteButtonStr = "audio-volume-muted";
         }
         else if (volume <= 0) {
             btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
+            sliderMuteButtonStr = "audio-volume-muted";
         }
         else if (volume > 0 && volume <= 33) {
+            sliderMuteButtonStr = "audio-volume-low";
             btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-low.svg"));
         }
         else if(volume > 33 && volume <= 66) {
+            sliderMuteButtonStr = "audio-volume-medium";
             btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-medium.svg"));
         }
         else if (volume > 66) {
+            sliderMuteButtonStr = "audio-volume-high";
             btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-high.svg"));
         }
+        sliderMuteButtonIcon = QIcon::fromTheme(sliderMuteButtonStr);
+//        btn->setIcon(sliderMuteButtonIcon);
+//        w->drawImagColorFromTheme(btn,audioIconStr);
     });
 
     connect(w,&DeviceSwitchWidget::system_muted_signal,[=](bool isMute){
         mate_mixer_stream_control_set_mute(control,isMute);
-
+        QString muteButtonStr;
+        QIcon muteButtonIcon;
         int volume = mate_mixer_stream_control_get_volume(control);
         volume = volume*100/65536.0;
         QPushButton *btn = w->findChild<QPushButton *>(appMuteBtnlStr);
         if (btn == nullptr)
             return;
         if (isMute) {
+            muteButtonStr = "audio-volume-muted";
             btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
         }
         else if (volume <= 0) {
-             btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
+            muteButtonStr = "audio-volume-muted";
+            btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
         }
         else if (volume > 0 && volume <= 33) {
-             btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-low.svg"));
+            muteButtonStr = "audio-volume-low";
+            btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-low.svg"));
         }
         else if(volume > 33 && volume <= 66) {
-             btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-medium.svg"));
+            muteButtonStr = "audio-volume-medium";
+            btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-medium.svg"));
         }
         else if (volume > 66) {
-             btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-high.svg"));
+            muteButtonStr = "audio-volume-high";
+            btn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-high.svg"));
         }
+        muteButtonIcon = QIcon::fromTheme(muteButtonStr);
+//        btn->setIcon(muteButtonIcon);
+//        w->drawImagColorFromTheme(btn,audioIconStr);
     });
 
     if (appnum <= 0) {
@@ -2087,22 +2442,17 @@ void DeviceSwitchWidget::update_icon_out
     slider1->setValue(value);
     QString percent = QString::number(value);
     QString systemTrayIcon;
-    QIcon icon;
+    QString audioIconStr;
+    QIcon trayIcon;
+    QIcon audioIcon;
+
     if (state) {
         systemTrayIcon = "audio-volume-muted";
-        icon = QIcon::fromTheme(systemTrayIcon);
-        w->soundSystemTrayIcon->setIcon(QIcon(icon));
-        w->devWidget->outputMuteBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
-        w->appWidget->systemVolumeBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
-        w->miniWidget->muteBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
+        audioIconStr = "audio-volume-muted-symbolic";
     }
     else if (value <= 0) {
         systemTrayIcon = "audio-volume-muted";
-        icon = QIcon::fromTheme(systemTrayIcon);
-        w->miniWidget->muteBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
-        w->devWidget->outputMuteBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
-        w->appWidget->systemVolumeBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
-        w->soundSystemTrayIcon->setIcon(QIcon(icon));
+        audioIconStr = "audio-volume-muted-symbolic";
         w->m_pMuteAction->setIcon(QIcon(""));
         //如果主主音量处于静音状态，应用音量取消静音则设置主音量取消静音
         /*if (state) {
@@ -2113,30 +2463,26 @@ void DeviceSwitchWidget::update_icon_out
     }
     else if (value > 0 && value <= 33) {
         systemTrayIcon = "audio-volume-low";
-        icon = QIcon::fromTheme(systemTrayIcon);
-        w->soundSystemTrayIcon->setIcon(QIcon(icon));
-        w->miniWidget->muteBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-low.svg"));
-        w->devWidget->outputMuteBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-low.svg"));
-        w->appWidget->systemVolumeBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-low.svg"));
+        audioIconStr = "audio-volume-low-symbolic";
     }
     else if(value > 33 && value <= 66) {
         systemTrayIcon = "audio-volume-medium";
-        icon = QIcon::fromTheme(systemTrayIcon);
-        w->soundSystemTrayIcon->setIcon(QIcon(icon));
-        w->appWidget->systemVolumeBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-medium.svg"));
-        w->devWidget->outputMuteBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-medium.svg"));
-        w->miniWidget->muteBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-medium.svg"));
+        audioIconStr = "audio-volume-medium-symbolic";
         w->m_pMuteAction->setIcon(QIcon(""));
     }
     else if (value > 66) {
         systemTrayIcon = "audio-volume-high";
-        icon = QIcon::fromTheme(systemTrayIcon);
-        w->soundSystemTrayIcon->setIcon(QIcon(icon));
-        w->miniWidget->muteBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-high.svg"));
-        w->devWidget->outputMuteBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-high.svg"));
-        w->appWidget->systemVolumeBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-high.svg"));
+        audioIconStr = "audio-volume-high-symbolic";
         w->m_pMuteAction->setIcon(QIcon(""));
     }
+
+    w->themeChangeIcons();
+    trayIcon = QIcon::fromTheme(systemTrayIcon);
+//    audioIcon = QIcon::fromTheme(audioIconStr);
+    w->soundSystemTrayIcon->setIcon(QIcon(trayIcon));
+//    w->devWidget->outputMuteBtn->setIcon(QIcon(audioIcon));
+//    w->miniWidget->muteBtn->setIcon(QIcon(audioIcon));
+    w->appWidget->systemVolumeBtn->setIcon(QIcon(audioIcon));
     w->miniWidget->displayVolumeLabel->setText(percent);
     w->appWidget->systemVolumeDisplayLabel->setText(percent);
 
@@ -2388,22 +2734,25 @@ bool DeviceSwitchWidget:: event(QEvent *
  */
 void DeviceSwitchWidget::updateMicrophoneIcon(int value, bool status)
 {
+    QString micIconStr;
+    QIcon micIcon;
     if (status) {
-        devWidget->inputMuteButton->setIcon(QIcon("/usr/share/ukui-media/img/microphone-mute.svg"));
+        micIconStr = "microphone-sensitivity-muted-symbolic";
     }
     else if (value <= 0) {
-        devWidget->inputMuteButton->setIcon(QIcon("/usr/share/ukui-media/img/microphone-mute.svg"));
+        micIconStr = "microphone-sensitivity-muted-symbolic";
     }
     else if (value > 0 && value <= 33) {
-       devWidget->inputMuteButton->setIcon(QIcon("/usr/share/ukui-media/img/microphone-low.svg"));
+        micIconStr = "microphone-sensitivity-low-symbolic";
     }
     else if(value > 33 && value <= 66) {
-        devWidget->inputMuteButton->setIcon(QIcon("/usr/share/ukui-media/img/microphone-medium.svg"));
+        micIconStr = "microphone-sensitivity-medium-symbolic";
     }
     else if (value > 66) {
-        devWidget->inputMuteButton->setIcon(QIcon("/usr/share/ukui-media/img/microphone-high.svg"));
+        micIconStr = " ";
     }
-
+    micIcon = QIcon::fromTheme(micIconStr);
+    devWidget->inputMuteButton->setIcon(micIcon);
 }
 
 /*!
@@ -2510,56 +2859,45 @@ void DeviceSwitchWidget::advancedWidgetS
 void DeviceSwitchWidget::updateSystemTrayIcon(int volume,bool isMute)
 {
     QString systemTrayIcon;
+    QString audioIconStr;
+    QIcon audioIcon;
     QIcon icon;
     if (isMute) {
         systemTrayIcon = "audio-volume-muted";
-        icon = QIcon::fromTheme(systemTrayIcon);
-        m_pMuteAction->setIcon(QIcon("/usr/share/ukui-media/img/tick.svg"));
-        soundSystemTrayIcon->setIcon(icon);
-        miniWidget->muteBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
-        appWidget->systemVolumeBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
-        devWidget->outputMuteBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
+        audioIconStr = "audio-volume-muted-symbolic";
     }
     else if (volume <= 0) {
         systemTrayIcon = "audio-volume-muted";
-        icon = QIcon::fromTheme(systemTrayIcon);
-        m_pMuteAction->setIcon(QIcon(""));
-        soundSystemTrayIcon->setIcon(icon);
-        miniWidget->muteBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
-        appWidget->systemVolumeBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
-        devWidget->outputMuteBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-muted.svg"));
+        audioIconStr = "audio-volume-muted-symbolic";
     }
     else if (volume > 0 && volume <= 33) {
         systemTrayIcon = "audio-volume-low";
+        audioIconStr = "audio-volume-low-symbolic";
         m_pMuteAction->setIcon(QIcon(""));
-        icon = QIcon::fromTheme(systemTrayIcon);
-        soundSystemTrayIcon->setIcon(icon);
-        miniWidget->muteBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-low.svg"));
-        appWidget->systemVolumeBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-low.svg"));
-        devWidget->outputMuteBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-low.svg"));
     }
     else if (volume >33 && volume <= 66) {
         systemTrayIcon = "audio-volume-medium";
+        audioIconStr = "audio-volume-medium-symbolic";
         m_pMuteAction->setIcon(QIcon(""));
-        icon = QIcon::fromTheme(systemTrayIcon);
-        soundSystemTrayIcon->setIcon(icon);
-        miniWidget->muteBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-medium.svg"));
-        appWidget->systemVolumeBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-medium.svg"));
-        devWidget->outputMuteBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-medium.svg"));
     }
     else {
         systemTrayIcon = "audio-volume-high";
+        audioIconStr = "audio-volume-high-symbolic";
         m_pMuteAction->setIcon(QIcon(""));
-        icon = QIcon::fromTheme(systemTrayIcon);
-        soundSystemTrayIcon->setIcon(icon);
-        miniWidget->muteBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-high.svg"));
-        appWidget->systemVolumeBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-high.svg"));
-        devWidget->outputMuteBtn->setIcon(QIcon("/usr/share/ukui-media/img/audio-volume-high.svg"));
     }
+    icon = QIcon::fromTheme(systemTrayIcon);
+    audioIcon = QIcon::fromTheme(audioIconStr);
+    soundSystemTrayIcon->setIcon(icon);
+    miniWidget->muteBtn->setIcon(audioIcon);
+    appWidget->systemVolumeBtn->setIcon(audioIcon);
+    devWidget->outputMuteBtn->setIcon(audioIcon);
+
 
     //设置声音菜单栏静音选项的勾选状态
     if (isMute) {
-        m_pMuteAction->setIcon(QIcon("/usr/share/ukui-media/img/tick.svg"));
+        QString muteActionIconStr = "object-select-symbolic";
+        QIcon muteActionIcon = QIcon::fromTheme(muteActionIconStr);
+        m_pMuteAction->setIcon(muteActionIcon);
     }
     else {
         m_pMuteAction->setIcon(QIcon(""));
--- ukui-media-2.0.3.orig/ukui-volume-control-applet-qt/ukmedia_device_switch_widget.h
+++ ukui-media-2.0.3/ukui-volume-control-applet-qt/ukmedia_device_switch_widget.h
@@ -40,6 +40,11 @@ extern "C" {
 #include <libmatemixer/matemixer.h>
 #include <gio/gio.h>
 }
+
+#define UKUI_THEME_SETTING "org.ukui.style"
+#define UKUI_THEME_NAME "style-name"
+#define UKUI_THEME_WHITE "ukui-white"
+#define UKUI_THEME_BLACK "ukui-black"
 #define UKUI_PANEL_SETTING "org.ukui.panel.settings"
 #define MATE_DESKTOP_USE_UNSTABLE_API
 #define VERSION "1.12.1"
@@ -78,6 +83,18 @@ public:
     void miniWidgetShow();
     void advancedWidgetShow();
 
+    int getInputVolume();
+    int getOutputVolume();
+    bool getInputMuteStatus();
+    bool getOutputMuteStatus();
+
+    void inputVolumeDarkThemeImage(int value,bool status);
+    void outputVolumeDarkThemeImage(int value,bool status);
+    void drawImagColorFromTheme(UkuiButtonDrawSvg *button, QString iconStr);
+    void themeChangeIcons();
+
+    QString getAppName(QString desktopfp);
+    QString getAppIcon(QString desktopfp);
     static void list_device(DeviceSwitchWidget *w,MateMixerContext *context);
     static void gvc_stream_status_icon_set_control (DeviceSwitchWidget *w,MateMixerStreamControl *control);
     static void context_set_property(DeviceSwitchWidget *object);
@@ -158,6 +175,7 @@ private Q_SLOTS:
     void primaryScreenChangedSlot(QScreen *screen);
     void inputWidgetMuteButtonClicked();
     void inputWidgetSliderChangedSlot(int value);
+    void ukuiThemeChangedSlot(const QString &themeStr);
 private:
     QPushButton *deviceBtn;
     QPushButton *appVolumeBtn;
@@ -184,12 +202,15 @@ private:
     QStringList *app_name_list;
 
     QMenu *menu;
+    QGSettings *m_pThemeSetting;
     QAction *m_pMuteAction;
     QAction *m_pSoundPreferenceAction;
     QString outputControlName;
     GSettings *sound_settings;
     UkmediaTrayIcon *soundSystemTrayIcon;
     QProcess *m_process;
+    QString mThemeName;
+
 protected:
     void paintEvent(QPaintEvent *event);
     bool event(QEvent *event);//重写窗口事件
--- ukui-media-2.0.3.orig/ukui-volume-control-applet-qt/ukmedia_device_volume_widget.cpp
+++ ukui-media-2.0.3/ukui-volume-control-applet-qt/ukmedia_device_volume_widget.cpp
@@ -37,11 +37,11 @@ UkmediaDeviceWidget::UkmediaDeviceWidget
     inputDeviceDisplayLabel = new QLabel(tr("Microphone"),inputWidget);
     inputDeviceBtn = new QPushButton(inputWidget);
     inputDeviceSlider = new UkmediaVolumeSlider(inputSliderWidget);
-    inputMuteButton = new QPushButton(inputSliderWidget);
+    inputMuteButton = new UkuiButtonDrawSvg(inputSliderWidget);
 
     outputWidget->setFixedSize(340,60);
     outputSliderWidget->setFixedSize(306,32);
-    outputMuteBtn = new QPushButton(outputSliderWidget);
+    outputMuteBtn = new UkuiButtonDrawSvg(outputSliderWidget);
     outputDeviceLabel = new QLabel(tr("Output Device"),this);
     outputDeviceDisplayLabel = new QLabel(tr("Speaker Realtek Audio"),outputWidget);
     outputDeviceBtn = new QPushButton(outputWidget);
--- ukui-media-2.0.3.orig/ukui-volume-control-applet-qt/ukmedia_device_volume_widget.h
+++ ukui-media-2.0.3/ukui-volume-control-applet-qt/ukmedia_device_volume_widget.h
@@ -37,7 +37,7 @@ public:
     void inputWidgetHide();
     friend class  DeviceSwitchWidget;
 private:
-    QPushButton *outputMuteBtn;
+    UkuiButtonDrawSvg *outputMuteBtn;
     QLabel *outputDeviceLabel;
     QLabel *outputDeviceDisplayLabel;
     QPushButton *outputDeviceBtn;
@@ -51,7 +51,7 @@ private:
 
     QLabel *displayOutputLabel;
     QLabel *inputDeviceLabel;
-    QPushButton *inputMuteButton;
+    UkuiButtonDrawSvg *inputMuteButton;
     QLabel *inputDeviceDisplayLabel;
     QLabel *noInputDeviceLabel;
     QPushButton *inputDeviceBtn;
--- ukui-media-2.0.3.orig/ukui-volume-control-applet-qt/ukmedia_mini_master_volume_widget.cpp
+++ ukui-media-2.0.3/ukui-volume-control-applet-qt/ukmedia_mini_master_volume_widget.cpp
@@ -24,7 +24,7 @@
 UkmediaMiniMasterVolumeWidget::UkmediaMiniMasterVolumeWidget(QWidget *parent) : QWidget(parent)
 {
     masterWidget = new QWidget(this);
-    muteBtn = new QPushButton(masterWidget);
+    muteBtn = new UkuiButtonDrawSvg(masterWidget);
     displayVolumeLabel = new QLabel(masterWidget);
     masterVolumeSlider = new UkmediaVolumeSlider(masterWidget);
 
--- ukui-media-2.0.3.orig/ukui-volume-control-applet-qt/ukmedia_mini_master_volume_widget.h
+++ ukui-media-2.0.3/ukui-volume-control-applet-qt/ukmedia_mini_master_volume_widget.h
@@ -43,7 +43,7 @@ private:
     UkmediaVolumeSlider *masterVolumeSlider;
     QLabel *displayVolumeLabel;
 //    QLabel *deviceLabel;
-    QPushButton *muteBtn;
+    UkuiButtonDrawSvg *muteBtn;
     UkuiMediaButton *switchBtn;
 
     QPushButton *deviceBtn;
--- ukui-media-2.0.3.orig/ukui-volume-control-applet-qt/ukmedia_slider_tip_label_helper.cpp
+++ ukui-media-2.0.3/ukui-volume-control-applet-qt/ukmedia_slider_tip_label_helper.cpp
@@ -55,7 +55,7 @@ SliderTipLabelHelper::SliderTipLabelHelp
 {
 
     m_pTiplabel = new MediaSliderTipLabel();
-    m_pTiplabel->setWindowFlag(Qt::ToolTip);
+    m_pTiplabel->setWindowFlags(Qt::ToolTip);
     qApp->installEventFilter(new AppEventFilter(this));
     m_pTiplabel->setFixedSize(52,30);
     m_pTiplabel->setAlignment(Qt::AlignHCenter | Qt::AlignVCenter);
--- ukui-media-2.0.3.orig/ukui-volume-control-applet-qt/ukmedia_volume_slider.cpp
+++ ukui-media-2.0.3/ukui-volume-control-applet-qt/ukmedia_volume_slider.cpp
@@ -127,3 +127,110 @@ UkmediaVolumeSlider::~UkmediaVolumeSlide
 {
 
 }
+
+void UkuiButtonDrawSvg::init(QImage img, QColor color)
+{
+    themeIcon.image = img;
+    themeIcon.color = color;
+}
+
+void UkuiButtonDrawSvg::paintEvent(QPaintEvent *event)
+{
+    QStyleOption opt;
+    opt.init(this);
+    QPainter p(this);
+    p.setBrush(QBrush(QColor(0x13,0x13,0x14,0x00)));
+    p.setPen(Qt::NoPen);
+    QPainterPath path;
+    opt.rect.adjust(0,0,0,0);
+    path.addRoundedRect(opt.rect,6,6);
+    p.setRenderHint(QPainter::Antialiasing);  // 反锯齿;
+    p.drawRoundedRect(opt.rect,6,6);
+    setProperty("blurRegion",QRegion(path.toFillPolygon().toPolygon()));
+    style()->drawPrimitive(QStyle::PE_Widget, &opt, &p, this);
+}
+
+QRect UkuiButtonDrawSvg::IconGeometry()
+{
+    QRect res = QRect(QPoint(0,0),QSize(24,24));
+    res.moveCenter(QRect(0,0,width(),height()).center());
+    return res;
+}
+
+void UkuiButtonDrawSvg::draw(QPaintEvent* e)
+{
+    Q_UNUSED(e);
+    QPainter painter(this);
+    QRect iconRect = IconGeometry();
+    if (themeIcon.image.size() != iconRect.size())
+    {
+        themeIcon.image = themeIcon.image.scaled(iconRect.size(), Qt::KeepAspectRatio, Qt::SmoothTransformation);
+        QRect r = themeIcon.image.rect();
+        r.moveCenter(iconRect.center());
+        iconRect = r;
+    }
+
+    this->setProperty("fillIconSymbolicColor", true);
+    filledSymbolicColoredPixmap(themeIcon.image,themeIcon.color);
+    painter.drawImage(iconRect, themeIcon.image);
+}
+
+bool UkuiButtonDrawSvg::event(QEvent *event)
+{
+    switch (event->type())
+    {
+    case QEvent::Paint:
+        draw(static_cast<QPaintEvent*>(event));
+        break;
+
+    case QEvent::Move:
+    case QEvent::Resize:
+    {
+        QRect rect = IconGeometry();
+    }
+        break;
+
+    case QEvent::MouseButtonPress:
+    case QEvent::MouseButtonRelease:
+    case QEvent::MouseButtonDblClick:
+        event->accept();
+        break;
+
+    default:
+        break;
+    }
+
+    return QPushButton::event(event);
+}
+
+
+UkuiButtonDrawSvg::UkuiButtonDrawSvg(QWidget *parent)
+{
+    Q_UNUSED(parent);
+}
+UkuiButtonDrawSvg::~UkuiButtonDrawSvg()
+{
+
+}
+
+QPixmap UkuiButtonDrawSvg::filledSymbolicColoredPixmap(QImage &img, QColor &baseColor)
+{
+
+    for (int x = 0; x < img.width(); x++) {
+        for (int y = 0; y < img.height(); y++) {
+            auto color = img.pixelColor(x, y);
+            if (color.alpha() > 0) {
+                int hue = color.hue();
+                if (!qAbs(hue - symbolic_color.hue()) < 10) {
+                    color.setRed(baseColor.red());
+                    color.setGreen(baseColor.green());
+                    color.setBlue(baseColor.blue());
+                    img.setPixelColor(x, y, color);
+                }
+            }
+        }
+    }
+
+    return QPixmap::fromImage(img);
+}
+
--- ukui-media-2.0.3.orig/ukui-volume-control-applet-qt/ukmedia_volume_slider.h
+++ ukui-media-2.0.3/ukui-volume-control-applet-qt/ukmedia_volume_slider.h
@@ -25,15 +25,39 @@
 #include <QToolButton>
 #include <QFrame>
 #include <QDebug>
+
+typedef struct UkuiThemeIcon
+{
+    QImage image;
+    QColor color;
+}UkuiThemeIcon;
 enum DisplayerMode{
     MINI_MODE,
     ADVANCED_MODE
 };
-
+static QColor symbolic_color = Qt::gray;
 //class UkuiDeviceButton:public QPushButton
 //{
 
 //}
+class UkuiButtonDrawSvg:public QPushButton
+{
+    Q_OBJECT
+public:
+    UkuiButtonDrawSvg(QWidget *parent = nullptr);
+    ~UkuiButtonDrawSvg();
+    QPixmap filledSymbolicColoredPixmap(QImage &source, QColor &baseColor);
+    QRect IconGeometry();
+    void draw(QPaintEvent* e);
+    void init(QImage image ,QColor color);
+    friend class DeviceSwitchWidget;
+
+protected:
+    void paintEvent(QPaintEvent *event);
+    bool event(QEvent *e);
+private:
+    UkuiThemeIcon themeIcon;
+};
 
 class UkuiApplicationWidget:public QWidget
 {
--- ukui-media-2.0.3.orig/ukui-volume-control-applet-qt/ukui-volume-control-applet-qt.pro
+++ ukui-media-2.0.3/ukui-volume-control-applet-qt/ukui-volume-control-applet-qt.pro
@@ -9,6 +9,7 @@ greaterThan(QT_MAJOR_VERSION, 4): QT +=
 TEMPLATE = app
 TARGET = ukui-volume-control-applet-qt
 INCLUDEPATH += .
+QMAKE_CXXFLAGS += -std=c++11
 
 PREFIX = /usr/share/ukui-media
 
@@ -65,7 +66,8 @@ RESOURCES += \
     res.qrc
 
 TRANSLATIONS += \
-    translations/*.ts
+    translations/ukui-volume-control-applet-qt-zh_CN.ts \
+    translations/ukui-volume-control-applet-qt-bo.ts
 
 system("lrelease translations/*.ts")
 
